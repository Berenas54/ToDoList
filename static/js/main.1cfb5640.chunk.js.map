{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","useState","title","setTitle","error","setError","tasks","map","task","className","isDone","key","id","onChange","e","changeTaskStatus","currentTarget","checked","type","onClick","removeTask","addTask","trimmedTitle","trim","removeToDoList","value","onKeyPress","filter","changeFilter","App","toDoListID1","v1","toDoListID2","toDoLists","setToDoLists","setTasks","taskID","toDoListID","toDoListTasks","newTask","newFilterValue","toDoList","find","tl","RemoveToDoList","tasksForToDoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1cfb5640.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    id: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    addTask: (title: string, toDoListID: string) => void\r\n    removeTask: (taskID: string, toDoListID: string) => void\r\n    changeFilter: (newFilterValue: FilterValuesType, toDoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, toDoListID: string) => void\r\n    removeToDoList:(toDoListID: string)=> void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n    const [title, setTitle] = useState<string>(\" \")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const tasks = props.tasks.map(task => {\r\n        const removeTask = () => {\r\n            props.removeTask(task.id, props.id)\r\n        }\r\n\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n        }\r\n\r\n        return <li className={task.isDone ? \"is-done\" : \"\"} key={task.id}>\r\n            <input onChange={changeTaskStatus} type=\"checkbox\" checked={task.isDone}/>\r\n            <span>{task.title}</span>\r\n            <button onClick={removeTask}> X</button>\r\n        </li>\r\n    })\r\n\r\n\r\n    const addTask = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle !== \"\") {\r\n            props.addTask(trimmedTitle, props.id)\r\n\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n        setTitle('')\r\n    }\r\n\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") addTask()\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id)\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id)\r\n\r\n\r\n    return (<div>\r\n            <h3>{props.title} <button onClick={()=>props.removeToDoList(props.id)}>X</button></h3>\r\n            <div>\r\n                <input value={title} className={error ? \"error\" : \"\"} onChange={onNewTitleChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}/>\r\n                 <button onClick={addTask}>+</button>\r\n                {error && <div className={\"error-message\"}>{error}</div>}\r\n            </div>\r\n            <ul>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === \"all\" ? \"active-filter\" : \"\"} onClick={onAllClickHandler}>All\r\n                </button>\r\n                <button className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </button>\r\n                <button className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\ntype ToDoListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    const toDoListID1 = v1()\r\n    const toDoListID2 = v1()\r\n\r\n    const [toDoLists, setToDoLists] = useState<Array<ToDoListType>>([\r\n        {id: toDoListID1, title: 'Test text', filter: 'all'},\r\n        {id: toDoListID2, title: 'What I know?', filter: 'all'}\r\n    ])\r\n\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [toDoListID1]: [\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Html\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n        ],\r\n        [toDoListID2]: [\r\n            {id: v1(), title: \"Cat\", isDone: false},\r\n            {id: v1(), title: \"Rabbit\", isDone: true},\r\n        ]\r\n    })\r\n\r\n\r\n    function removeTask(taskID: string, toDoListID: string) {\r\n        const toDoListTasks = tasks[toDoListID]\r\n        tasks[toDoListID] = toDoListTasks.filter(task => task.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, toDoListID: string) {\r\n        const newTask: TaskType = {id: v1(), title: title, isDone: false}\r\n        tasks[toDoListID] = [newTask, ...tasks[toDoListID]]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n\r\n    function changeFilter(newFilterValue: FilterValuesType, toDoListID: string) {\r\n        const toDoList = toDoLists.find(tl => tl.id === toDoListID)\r\n        if (toDoList) {\r\n            toDoList.filter = newFilterValue\r\n            setToDoLists([...toDoLists])\r\n        }\r\n\r\n    }\r\n\r\n    function changeTaskStatus(taskID: string, isDone: boolean, toDoListID: string) {\r\n        const task: TaskType | undefined = tasks[toDoListID].find(task => task.id === taskID)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function RemoveToDoList(toDoListID: string) {\r\n        setToDoLists(toDoLists.filter(tl => tl.id !== toDoListID))\r\n        delete tasks[toDoListID]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {toDoLists.map(tl => {\r\n                let tasksForToDoList = tasks[tl.id]\r\n                if (tl.filter === \"active\") {\r\n                    tasksForToDoList = tasks[tl.id].filter(task => !task.isDone)\r\n                }\r\n                if (tl.filter === \"completed\") {\r\n                    tasksForToDoList = tasks[tl.id].filter(task => task.isDone)\r\n                }\r\n                return (\r\n                    <TodoList\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForToDoList}\r\n                        filter={tl.filter}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeToDoList={RemoveToDoList}\r\n                    />)\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}