{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","label","helperText","variant","value","onChange","e","currentTarget","onKeyPress","key","IconButton","onClick","AddBox","color","EditableSpan","editMode","setEditMode","onBlur","changeValue","autoFocus","onDoubleClick","TodoList","tasks","map","task","className","isDone","id","Checkbox","changeTaskStatus","checked","newValue","changeTaskTitle","removeTask","Delete","changeToDoListTitle","removeToDoList","addTask","style","listStyle","paddingLeft","Button","filter","size","changeFilter","App","toDoListID1","v1","toDoListID2","toDoLists","setToDoLists","setTasks","taskID","toDoListID","toDoListTasks","newTask","newFilterValue","toDoList","find","tl","changeTaskSTitle","RemoveToDoList","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","newToDoListID","newToDoList","spacing","tasksForToDoList","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6813f294.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport { IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n    const [title, setTitle] = useState<string>(\" \")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") addItem()\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle !== \"\") {\r\n            props.addItem(trimmedTitle)\r\n\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n        setTitle('')\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                label={\"Title\"}\r\n                helperText={error}\r\n                error={!!error}\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onNewTitleChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            <IconButton onClick={addItem}>\r\n                <AddBox color={\"primary\"}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype editableSpanType = {\r\n    title: string\r\n    changeValue: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: editableSpanType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const activatedEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeValue(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (editMode\r\n            ? <TextField onBlur={deActivatedEditMode} onChange={onChangeTitle} value={title} autoFocus={true}/>\r\n            : <span onDoubleClick={activatedEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    id: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    addTask: (title: string, toDoListID: string) => void\r\n    removeTask: (taskID: string, toDoListID: string) => void\r\n    changeFilter: (newFilterValue: FilterValuesType, toDoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, toDoListID: string) => void\r\n    removeToDoList: (toDoListID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, toDoListID: string) => void\r\n    changeToDoListTitle: (title: string, toDoListID: string) => void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const changeToDoListTitle = (title: string) => {\r\n        props.changeToDoListTitle(title, props.id)\r\n    }\r\n\r\n    const tasks = props.tasks.map(task => {\r\n        const removeTask = () => {\r\n            props.removeTask(task.id, props.id)\r\n        }\r\n\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n        }\r\n        const changeTaskTitle = (newValue: string) => {\r\n            props.changeTaskTitle(task.id, newValue, props.id)\r\n        }\r\n\r\n        return <li className={task.isDone ? \"is-done\" : \"\"} key={task.id}>\r\n            <Checkbox\r\n                color={\"primary\"}\r\n                onChange={changeTaskStatus}\r\n                checked={task.isDone}\r\n            />\r\n            <EditableSpan title={task.title}\r\n                          changeValue={changeTaskTitle}/>\r\n            <IconButton onClick={removeTask}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    })\r\n\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id)\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id)\r\n\r\n    return (<div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeValue={changeToDoListTitle}/>\r\n                <IconButton onClick={() => props.removeToDoList(props.id)}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul style={{listStyle:\"none\", paddingLeft:\"0\"}}>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <Button variant={props.filter === \"all\" ? \"contained\" : \"outlined\"} color={\"primary\"} size={\"small\"}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button variant={props.filter === \"active\" ? \"contained\" : \"outlined\"} color={\"primary\"} size={\"small\"}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"} size={\"small\"}\r\n                        color={\"primary\"}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\ntype ToDoListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    const toDoListID1 = v1()\r\n    const toDoListID2 = v1()\r\n\r\n    const [toDoLists, setToDoLists] = useState<Array<ToDoListType>>([\r\n        {id: toDoListID1, title: 'Test text', filter: 'all'},\r\n        {id: toDoListID2, title: 'What I know?', filter: 'all'}\r\n    ])\r\n\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [toDoListID1]: [\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Html\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n        ],\r\n        [toDoListID2]: [\r\n            {id: v1(), title: \"Cat\", isDone: false},\r\n            {id: v1(), title: \"Rabbit\", isDone: true},\r\n        ]\r\n    })\r\n\r\n\r\n    function removeTask(taskID: string, toDoListID: string) {\r\n        const toDoListTasks = tasks[toDoListID]\r\n        tasks[toDoListID] = toDoListTasks.filter(task => task.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, toDoListID: string) {\r\n        const newTask: TaskType = {id: v1(), title: title, isDone: false}\r\n        tasks[toDoListID] = [newTask, ...tasks[toDoListID]]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n\r\n    function changeFilter(newFilterValue: FilterValuesType, toDoListID: string) {\r\n        const toDoList = toDoLists.find(tl => tl.id === toDoListID)\r\n        if (toDoList) {\r\n            toDoList.filter = newFilterValue\r\n            setToDoLists([...toDoLists])\r\n        }\r\n\r\n    }\r\n\r\n    function changeTaskStatus(taskID: string, isDone: boolean, toDoListID: string) {\r\n        const task: TaskType | undefined = tasks[toDoListID].find(task => task.id === taskID)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeTaskSTitle(taskID: string, title: string, toDoListID: string) {\r\n        const task: TaskType | undefined = tasks[toDoListID].find(task => task.id === taskID)\r\n        if (task) {\r\n            task.title = title\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeToDoListTitle(title: string, toDoListID: string) {\r\n        const toDoList = toDoLists.find(tl => tl.id === toDoListID)\r\n        if (toDoList) {\r\n            toDoList.title = title\r\n            setToDoLists([...toDoLists])\r\n        }\r\n\r\n    }\r\n\r\n    function RemoveToDoList(toDoListID: string) {\r\n        setToDoLists(toDoLists.filter(tl => tl.id !== toDoListID))\r\n        delete tasks[toDoListID]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        const newToDoListID: string = v1()\r\n        const newToDoList: ToDoListType = {\r\n            id: newToDoListID,\r\n            title: title,\r\n            filter: \"all\"\r\n        }\r\n        setToDoLists([...toDoLists, newToDoList])\r\n        setTasks({...tasks, [newToDoListID]: []})\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        ToDoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed={true}>\r\n                <Grid container={true} style={{padding: \"20px 0\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container={true} spacing={3}>\r\n                    {toDoLists.map(tl => {\r\n                        let tasksForToDoList = tasks[tl.id]\r\n                        if (tl.filter === \"active\") {\r\n                            tasksForToDoList = tasks[tl.id].filter(task => !task.isDone)\r\n                        }\r\n                        if (tl.filter === \"completed\") {\r\n                            tasksForToDoList = tasks[tl.id].filter(task => task.isDone)\r\n                        }\r\n                        return (\r\n                            <Grid item>\r\n                                <Paper elevation={2} style={{padding:\"0 0 10px 10px\"}}>\r\n                                    <TodoList\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForToDoList}\r\n                                        filter={tl.filter}\r\n                                        addTask={addTask}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        removeToDoList={RemoveToDoList}\r\n                                        changeTaskTitle={changeTaskSTitle}\r\n                                        changeToDoListTitle={changeToDoListTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>)\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}